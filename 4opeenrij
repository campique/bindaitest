<!DOCTYPE html>
<html lang="nl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>4 op een Rij Deluxe</title>
    <script src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.5.1/dist/confetti.browser.min.js"></script>
    <style>
        body {
            font-family: 'Comic Sans MS', cursive, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background: linear-gradient(135deg, #4CAF50, #2196F3);
            margin: 0;
        }

        .container {
            text-align: center;
            background: white;
            padding: 2rem;
            border-radius: 20px;
            box-shadow: 0 0 20px rgba(0,0,0,0.2);
        }

        h1, h2 {
            color: #2196F3;
            text-shadow: 2px 2px #4CAF50;
        }

        .start-menu {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .menu-button, .restart-button {
            margin: 1rem;
            padding: 1rem 2rem;
            font-size: 1.2rem;
            background-color: #4CAF50;
            border: none;
            border-radius: 50px;
            color: white;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            text-transform: uppercase;
        }

        .menu-button:hover, .restart-button:hover {
            background-color: #2196F3;
            transform: scale(1.1);
        }

        .board {
            display: grid;
            grid-template-columns: repeat(7, 50px);
            grid-gap: 5px;
            margin: 2rem auto;
            background-color: #2196F3;
            padding: 10px;
            border-radius: 10px;
        }

        .cell {
            width: 50px;
            height: 50px;
            background: white;
            border-radius: 50%;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .cell:hover {
            background: #E3F2FD;
        }

        .cell.red {
            background-color: #F44336;
        }

        .cell.yellow {
            background-color: #FFEB3B;
        }

        .status {
            font-size: 1.5rem;
            margin: 1rem 0;
            color: #2196F3;
            font-weight: bold;
        }

        .hidden {
            display: none !important;
        }

        @keyframes drop {
            0% { transform: translateY(-300px); }
            100% { transform: translateY(0); }
        }

        .cell.drop {
            animation: drop 0.5s ease-in;
        }
    </style>
</head>
<body>
    <div class="container">
        <div id="startMenu" class="start-menu">
            <h1>4 op een Rij Deluxe</h1>
            <button id="vsPlayer" class="menu-button">Tegen Speler</button>
            <button id="vsComputer" class="menu-button">Tegen Computer</button>
        </div>
        <div id="gameContainer" class="game-container hidden">
            <h2>4 op een Rij</h2>
            <div id="gameBoard" class="board"></div>
            <div id="status" class="status"></div>
            <button id="restartButton" class="restart-button">Opnieuw Spelen</button>
        </div>
    </div>

    <script>
        const startMenu = document.getElementById('startMenu');
        const gameContainer = document.getElementById('gameContainer');
        const board = document.getElementById('gameBoard');
        const restartButton = document.getElementById('restartButton');
        const statusDisplay = document.getElementById('status');
        const vsPlayerButton = document.getElementById('vsPlayer');
        const vsComputerButton = document.getElementById('vsComputer');

        const ROWS = 6;
        const COLS = 7;
        let currentPlayer = 'red';
        let gameState = Array(ROWS).fill().map(() => Array(COLS).fill(''));
        let gameActive = false;
        let againstComputer = false;

        function createBoard() {
            board.innerHTML = '';
            for (let row = 0; row < ROWS; row++) {
                for (let col = 0; col < COLS; col++) {
                    const cell = document.createElement('div');
                    cell.classList.add('cell');
                    cell.dataset.col = col;
                    cell.addEventListener('click', () => handleCellClick(col));
                    board.appendChild(cell);
                }
            }
        }

        function startGame(vsComputer) {
            againstComputer = vsComputer;
            gameActive = true;
            currentPlayer = 'red';
            gameState = Array(ROWS).fill().map(() => Array(COLS).fill(''));
            statusDisplay.textContent = `${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} is aan de beurt`;
            createBoard();
            startMenu.classList.add('hidden');
            gameContainer.classList.remove('hidden');
        }

        function handleCellClick(col) {
            if (!gameActive) return;
            const row = findLowestEmptyRow(col);
            if (row === -1) return;

            dropPiece(row, col, currentPlayer);
            if (checkWin(row, col)) {
                endGame(`${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} wint!`);
                return;
            }
            if (checkDraw()) {
                endGame("Gelijkspel!");
                return;
            }

            currentPlayer = currentPlayer === 'red' ? 'yellow' : 'red';
            statusDisplay.textContent = `${currentPlayer.charAt(0).toUpperCase() + currentPlayer.slice(1)} is aan de beurt`;

            if (againstComputer && currentPlayer === 'yellow') {
                setTimeout(makeComputerMove, 500);
            }
        }

        function findLowestEmptyRow(col) {
            for (let row = ROWS - 1; row >= 0; row--) {
                if (gameState[row][col] === '') {
                    return row;
                }
            }
            return -1;
        }

        function dropPiece(row, col, player) {
            gameState[row][col] = player;
            const cell = board.children[row * COLS + col];
            cell.classList.add(player, 'drop');
        }

        function checkWin(row, col) {
            const directions = [
                [0, 1], [1, 0], [1, 1], [1, -1]
            ];

            for (const [dx, dy] of directions) {
                if (countPieces(row, col, dx, dy) + countPieces(row, col, -dx, -dy) - 1 >= 4) {
                    return true;
                }
            }
            return false;
        }

        function countPieces(row, col, dx, dy) {
            let count = 0;
            const player = gameState[row][col];

            while (row >= 0 && row < ROWS && col >= 0 && col < COLS && gameState[row][col] === player) {
                count++;
                row += dx;
                col += dy;
            }

            return count;
        }

        function checkDraw() {
            return gameState.every(row => row.every(cell => cell !== ''));
        }

        function endGame(message) {
            gameActive = false;
            statusDisplay.textContent = message;
            if (message.includes("wint")) {
                confetti({
                    particleCount: 100,
                    spread: 70,
                    origin: { y: 0.6 }
                });
            }
        }

        function makeComputerMove() {
            const availableCols = [];
            for (let col = 0; col < COLS; col++) {
                if (findLowestEmptyRow(col) !== -1) {
                    availableCols.push(col);
                }
            }
            const randomCol = availableCols[Math.floor(Math.random() * availableCols.length)];
            handleCellClick(randomCol);
        }

        restartButton.addEventListener('click', () => {
            startMenu.classList.remove('hidden');
            gameContainer.classList.add('hidden');
        });
        vsPlayerButton.addEventListener('click', () => startGame(false));
        vsComputerButton.addEventListener('click', () => startGame(true));
    </script>
</body>
</html>
